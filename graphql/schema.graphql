scalar Upload @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")

# -- QUERIES --

type Query {
    cabRequests: [CabRequest!]! @paginate(defaultCount: 10)
    cabRequest(id: ID @eq): CabRequest @find
}

# -- MUTATIONS --

type Mutation {
  # Admin Auth
  adminLogin(input: LoginInput! @spread): AdminAuthPayload! 
    @field(resolver: "AdminResolver@login")

  # User Auth
  createUser(input: CreateUserInput! @spread): UserPayload!
    @field(resolver: "UserResolver@create")
  userLogin(input: LoginInput! @spread): UserPayload! 
    @field(resolver: "UserResolver@login")
  userSocialLogin(input: SocialLoginInput! @spread): UserPayload! 
    @field(resolver: "UserResolver@socialLogin")

  # Driver Auth
  driverLogin(input: LoginInput! @spread): DriverAuthPayload! 
    @field(resolver: "DriverResolver@login")
}

# User Guard
extend type Mutation @guard(with: ["admin", "user"]) {
  # Cab Request
  searchCabRequest(input: CabRequestInput! @spread): CabRequest
    @field(resolver: "CabRequestResolver@search")
  arrivedCabRequest(input: CabRequestInput! @spread): CabRequest
    @field(resolver: "CabRequestResolver@arrived")
}

# Driver Guard
extend type Mutation @guard(with: ["admin", "driver"]) {
  # Cab Request
  acceptCabRequest(input: CabRequestInput! @spread): CabRequest
    @field(resolver: "CabRequestResolver@accept")
  startCabRequest(input: CabRequestInput! @spread): CabRequest
    @field(resolver: "CabRequestResolver@start")
  endCabRequest(input: CabRequestInput! @spread): CabRequest
    @field(resolver: "CabRequestResolver@end")
}

# User|Driver Guard
extend type Mutation @guard(with: ["admin", "user", "driver"]) {
  # Cab Request
  cancelCabRequest(input: CabRequestInput! @spread): CabRequest
    @field(resolver: "CabRequestResolver@cancel")
}

#import admin.graphql
#import auth.graphql
#import cabRequest.graphql
#import driver.graphql
#import user.graphql
#import vehicle.graphql